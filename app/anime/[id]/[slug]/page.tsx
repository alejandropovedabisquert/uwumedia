import { fetchAnimeById } from "@/app/lib/data";
import { replaceLineBreak } from "@/app/lib/utils";
import AlternativeTitles from "@/app/ui/anime/id/AlternativeTitles/AlternativeTitles";
// import Characters from "@/app/ui/anime/id/Characters/Characters";
import Details from "@/app/ui/anime/id/Details/Details";
import Information from "@/app/ui/anime/id/Information/Information";
import RelatedAnimeWrapper from "@/app/ui/anime/id/RelatedAnime/RelatedAnimeWrapper";
import Statistics from "@/app/ui/anime/id/Statistics/Statistics";
import { Titulo } from "@/app/ui/common/Titulo";
import { Metadata } from "next";
import Image from "next/image";
import { notFound } from "next/navigation";

export async function generateMetadata({ params }: { params: { id: number } }): Promise<Metadata> {
    const id = params.id;
    let anime = [];

    try {
        anime = await fetchAnimeById(id);
    } catch (error) {
        console.error('Failed to fetch anime data:', error);
        return {
            title: "UwUmedia",
            description: "Generated by create next app",
        };
    }

    if (anime.error === "not_found") {
        return {
            title: "Anime Not Found - UwUmedia",
            description: "The anime you are looking for does not exist.",
        };
    }

    return {
        title: `${anime.title} - UwUmedia`,
        description: anime.synopsis || "No synopsis available.",
        openGraph: {
            title: `${anime.title} - UwUmedia`,
            description: anime.synopsis || "No synopsis available.",
            images: [anime.main_picture?.large],
        },
    };
}

export default async function AnimePage(props: { params: Promise<{ id: number }> }) {
    const params = await props.params;
    const id = params.id;
    let anime = [];
    // let characters = [];
    try {
        anime = await fetchAnimeById(id);
        // characters = await fetchAnimeCharactersById(id);
    } catch (error) {
        throw new Error('Failed to fetch seasonal anime data.' + error);
    }

    if (anime.error == "not_found") {
        notFound();
        return null
    }
    
    return (
        <div>
            {/* TOP BAR */}
            <div className="py-6">
                <h1 className="text-3xl font-bold">{anime.title}</h1>
            </div>
            <div className="flex flex-wrap md:flex-nowrap justify-start">
                {/* LEFT BAR */}
                <div className="w-full max-w-md md:pr-10">
                    <Image src={anime.main_picture?.large} alt={anime.title} className="rounded-2xl" width={400} height={400}/>
                    <AlternativeTitles anime={anime}/>
                    <Information anime={anime}/>
                    <Statistics anime={anime}/>
                </div>
                {/* RIGHT BAR */}
                <div className="w-full max-w-5xl">
                    {/* INFORMACION IMPORTANTE (SCORE, RANKED, POPULARITY, MEMBERS) */}
                    <Details anime={anime}/>

                    {/* SINOPSIS */}
                    <div className="mb-10">
                        <Titulo as="h3" position="left" className="text-xl font-bold">Synopsis</Titulo>
                        {
                            anime.synopsis ? (
                                <p dangerouslySetInnerHTML={{ __html: replaceLineBreak(anime.synopsis) }}/>
                            ) : (
                                <p>No synopsis information has been added to this title.</p>
                            )
                        }
                    </div>
                    
                    {/* BACKGROUND */}
                    {
                        anime.background ?(
                            <div className="mb-10">
                                <Titulo as="h3" position="right" className="text-xl font-bold">Background</Titulo>
                                <p dangerouslySetInnerHTML={{ __html: replaceLineBreak(anime.background) }}/>
                            </div>
                        ) : null
                    }

                    {/* SERIES RELACIONADAS (ANIME, MANGA, MUSICA, etc) */}
                    {
                        anime.related_anime.length != 0 ?(
                            <div>
                                <Titulo as="h3" position="left" className="text-xl font-bold">Related entries</Titulo>
                                <RelatedAnimeWrapper data={anime.related_anime} />
                            </div>
                        ) : null
                    }
                    <div className="mb-10">
                        <Titulo as="h3" position="right" className="text-xl font-bold">Characters</Titulo>
                        {/* <Characters characters={characters.data}/> */}
                    </div>
                    
                </div>

            </div>


            {/* <div>{anime.pictures}</div> ESTO HAY QUE HACERLE UN BUCLE */}
            {/* <div>{anime.recommendations}</div> CREO QUE CON ESTO NECESITO EL AUTH */}
            
            <div>{anime.statistics.status.watching}</div>
            <div>{anime.statistics.status.completed}</div>
            <div>{anime.statistics.status.on_hold}</div>
            <div>{anime.statistics.status.dropped}</div>
            <div>{anime.statistics.status.plan_to_watch}</div>
            <div>{anime.statistics.num_list_users}</div>
        </div>
    );
}